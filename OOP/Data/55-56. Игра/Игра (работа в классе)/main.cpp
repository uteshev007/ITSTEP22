//
// main.cpp
//

#include <iostream>
#include <string>       // для строк std::string
#include <vector>
#include <time.h>
#include <conio.h>      // для _getch(), _kbhit()
#include "Win10.h"
#include "BasePlayer.h"
using namespace std;

//
// игровое поле - массив строк типа string
// холст кадра игры (Canvas)
// Символы: & - главный игрок; @ - противники;
//          # - стена; 1,2,3,4 - бонусы;
//          * - жизнь;
//          ? - дверь, переход на следующий уровень;
//
//vector<string> Pole{{"", "", ""}};

string Pole[]   // <==> char pole[15][35+1];
{
  "###################################",
  "#   #*##      @          @        #",
  "# # @  #@############## ######### #",
  "# ###### #   #*#3  @  # ##@##   # #",
  "#       @  # # ###### # #@4   #@# #",
  "###### # ### #      # # ##@##   # #",
  "##  @# # # # #### # #   ##### # # #",
  "#* #   # # @    # ##*######*#   # #",
  "######## # ####         #   # # #@#",
  "#  2#    #      ####### # # #   # #",
  "# ### #### ######       # #   #   #",
  "#  @       #      ####### #########",
  "############ ######   #1# # @ #   #",
  "#      &            #   #   #@  #B#",
  "#################################?#"
};

// Глобальные игрового поля
// высота и ширина игрового поля
int PoleHeight;   // = 15
int PoleWidth;    // = 35

// Экранные координаты вывода поля на экран
int PoleRow = 3; // по строке
int PoleCol = 8; // по столбцу

// Глобальные переменные игры
vector<BasePlayer*> lstPlayers; // массив, список игроков
int cntPlayer = 1;  // для одного игрока
int cntEnemy  = 10; // кол-во противников

// флаги игры
bool isPause     = false; // для паузы
bool isGameOver  = false; // если игра окончена
bool isGameStart = false; // игра запущена
bool isWin       = false; // если была победа за игроком
int  cntWin      = 0;     // кол-во побед
int  cntLost     = 0;     // кол-во поражений


// прототипы функций
void StartGame();     // ф-ция для запуска новой игры
//GetCoordHero();       // Функция для получения координаты главного игрока
//GetCoordEnemys();     // Функция для получения координат противников
void DrawPole();      // функция вывода игрового поля на экран
void InitNewGame();   // функция иниц-ции новой игры

int main()
{
  //system("chcp 1251 > nul"); //setlocale(LC_ALL, "RUSSIAN");
  //system("chcp 866 > nul"); //setlocale(LC_ALL, "C");

  // вычисление высоты игрового поля:
  //   размер всего поля / размер одной строки
  PoleHeight = sizeof(Pole) / sizeof(Pole[0]);
  PoleWidth = Pole[0].size(); // ширина строки поля

  // Должен быть цикл для главного меню программы
  // while(true) {
  // MainMenu(); // Главное меню игры

  InitNewGame();   // иниц-руем новую игру
  StartGame();     // ф-ция для запуска новой игры
  // ContinueGame();  // ф-ция для продолжения игры после паузы
  // Settings();      // настройки
  // About();         // об авторах

  cin.get(); cin.get();
} // main()

// ф-ция иниц-ции переменных для новой игры
void InitNewGame()
{
  // цикл удаления игроков из памяти
  for (size_t i = 0; i < lstPlayers.size(); i++) {
    delete lstPlayers[i]; // удаление объектов игроков/противников
                          // через указатель из массива игроков
  }
  // очиска списка указателей на базовые классы игроков
  lstPlayers.clear();

  cntEnemy = 0;
  // получить текущие позиции игрока/противников
  for (int row = 0; row < PoleHeight; row++) {
    for (int col = 0; col < PoleWidth; col++) {
      if (Pole[row][col] == '@') { // противник найден
        BasePlayer* temp = new Enemy;
        temp->SetRowCol(row, col); // координаты
        lstPlayers.push_back(temp); // добавляем в список
        cntEnemy++; // считаем противников
      }
      if (Pole[row][col] == '&') { // игрок найден
        BasePlayer* temp = new Player;
        temp->SetRowCol(row, col);
        // Игрока добавляем первым в массиве игроков
        lstPlayers.insert(begin(lstPlayers), temp);
        //cntPlayer++; - если не один игрок
      }
    }
  } // for (int row = 0; row < PoleHeight; row++)
  // массив lstPlayers заполнен игроками и противниками
  // сбрасываем переменные состояния игры
  isGameOver = false;
  isWin = false;

} // InitNewGame()

// Функция начала новой игры
void StartGame()
{
  isPause = false;    // сигнал о прекращении паузы
  isGameStart = true; // сигнал о начале игры

  while (true) // цикл пока идет игра, завершить цикл по завершению игры
  {
    // 1) проверить нажатие клавиш
    // 2) получить код нажатой клавиши
    // 3) изменить позицию игрока, если он двигается
    // 4) движение противников
    for (size_t i = 0; i < lstPlayers.size(); i++)
    {
      //lstPlayers[i]->Move(Pole, frame); // движение игрока c регуляцией скорости
      lstPlayers[i]->Move(Pole); // движение игрока
      // Код для поддержки выстрелов игроков в игре
      /*if (lstPlayers[i]->IsShoot()) {
        //lstBullet.append( lstPlayers[i]->Shoot() );
        BaseBullet * temp = lstPlayers[i]->Shoot();
        lstBullet.push_back(temp);
      }*/
      // прорисовка игрока на игровом поле
      lstPlayers[i]->Draw(Pole);

      // Проверка на паузу -хочет ли i-ый игрок сделать паузу?
      if (lstPlayers[i]->IsPause()) { isPause = true; }
    }

    // 5) перепрорисовка поля на экране
    DrawPole(); // вывод поля на экран
    //frame++;
    // Проверка на паузу
    if (isPause) { return; /*break*/ } // выход в главное меню

    //if (lstPlayers[0]->IsPause()) { return; } - не лучший вариант

    // 6) проверка на завершение: победа или поражение
    // {
    //    isGameOver = true;
    //    isGameStart = false;
    //    isWin = true/false;
    //    break;
    // }
    Sleep(100); // Усыпить программу на 100 милисекунд
  } // while(true)

} // StartGame()

// функция вывода игрового поля на экран
void DrawPole()
{
  int iEn = 1; // индексы для противников
  for (int i = 0; i < PoleHeight; i++)
  {
    // поставить курсор консоли для i-ой строки поля
    SetPos(PoleRow + i, PoleCol);

    for (int j = 0; j < PoleWidth; j++)
    {
      if (Pole[i][j] == '#') { // символ стены 
        SetColor(COLOR::black, COLOR::light_green);
        cout << char(177);
      }
      else if (Pole[i][j] == '?') { // дверь - переход на новый уровень
        SetColor(COLOR::black, COLOR::light_yellow);  cout << char(178);
      }
      else if (Pole[i][j] == '1') { // бонус №1
        SetColor(COLOR::black, COLOR::light_purple);
        cout << '/';
      }
      else if (Pole[i][j] == '2') { // бонус №2
        SetColor(COLOR::black, COLOR::light_purple);
        cout << '!';
      }
      else if (Pole[i][j] == '3') { // бонус №3
        SetColor(COLOR::black, COLOR::light_purple);
        cout << char(24);
      }
      else if (Pole[i][j] == '4') { // бонус №4
        SetColor(COLOR::black, COLOR::light_purple);  cout << 'l';
      }
      else if (Pole[i][j] == '@') { // противники
        //SetColor(COLOR::black, COLOR::light_aqua);
        //cout << char(2); // лицо
        cout << *lstPlayers[iEn++]; // вывод противника в поток консоли
        //iEn++;
      }
      else if (Pole[i][j] == 'B') {
        SetColor(COLOR::black, COLOR::bright_white);  cout << char(1);
      }
      else if (Pole[i][j] == '*') {
        SetColor(COLOR::black, COLOR::light_red);     cout << char(3);
      }
      else if (Pole[i][j] == '&') { // главный герой игры
        //SetColor(COLOR::black, COLOR::light_yellow);
        //cout << char(2);
        cout << *lstPlayers[0]; // вывод игрока в поток консоли
      }
      else { cout << Pole[i][j]; } // все остальные символы поля

    } // for (j : PoleWidth)
  } // for (i : PoleHeight)
} // void DrawPole()
