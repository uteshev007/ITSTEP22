#define _USE_MATH_DEFINES
#include <iostream>
#include <fstream>  // файловые потоки
#include <iomanip>  // манипуляторы
#include <string>
#include <algorithm> // алгоритмические ф-ции STL
#include <math.h>
#include <time.h>
using namespace std;

#define RAND(Min,Max)  (rand()%((Max)-(Min)+1)+(Min))
struct LC { LC() { system("chcp 1251 > nul"); srand(time(0)); }~LC() { cin.get(); cin.get(); } } _;

/*
  Наследование.Множественное наследование

  Задание 3
Создать базовый класс с функцией - площадь.
Создать производные классы: прямоугольник, круг,
прямоугольный треугольник, трапеция со своими
функциями площади.
Для проверки определить массив ссылок на класс,
которым присваиваются адреса различных объектов.
*/

class Shape
{
private:
  string Type; // тип фигуры
protected:
  float S; // площадь фигуры
public:
  Shape() = delete; // Shape():S(){}
  Shape(string type) :Type(type), S() {}
  string GetType()const { return Type; }
  // сеттер для Type - запрещен
  float GetS()const { return S; }
  // сеттер для S - ?
  void Print()const {
    cout << typeid(*this).name() << endl;
    cout << "S = " << S << endl;
  }
  void Input() {
    cout << typeid(*this).name();
    cout << " - This method is not released!\n";
  }
  float GetSquare() { return S; }

}; // class Shape;

// дочерний класс от базового Shape
class Rect : public Shape
{ // + тело class Shape (S)
private:
protected:
  float a, b; // стороны прямоугольника
public:
  Rect() : Shape("Прямоугольник"), a(), b() {}
  Rect(float a, float b)
    : Shape("Прямоугольник"), a(a), b(b) {}
  // вычисление площади фигуры
  float GetSquare() {
    S = a * b;
    return S;
  }
  void Print() const {
    Shape::Print(); // cout << S <<endl;
    cout << typeid(*this).name() << endl; // class Rect
    cout << "a = " << a << endl;
    cout << "b = " << b << endl;
  }
  void Input() {
    cout << typeid(*this).name() << endl; // class Rect
    cout << "Enter a, b: ";
    (cin >> a >> b).ignore();
  }
}; // class Rect;

class Circle : public Shape
{
private:
protected:
  float R; // радиус круга
public:
  Circle() : Shape("Окружность"), R() {}
  //Circle(float r) : Shape("Круг"), R(r) {}
  Circle(float r) : Circle() {
    R = r;
  }
  void Print() const {
    Shape::Print(); // cout << S <<endl;
    cout << typeid(*this).name() << endl; // class Rect
    cout << "R = " << R << endl;
  }
  void Input() {
    cout << typeid(*this).name() << endl; // class Rect
    cout << "Enter R: ";
    (cin >> R).ignore();
  }
  float GetSquare() {
    S = M_PI * R * R; // площадь круга
    return S;
  }
}; // class Circle;


int main()
{
  bool isExit = false;
  while (!isExit) // while (isExit == false)
  {
    cout << "-----------------------\n";
    // пользовательское меню
    cout << "Выберите фигуру:\n"
         << "1 - Прямоугольник\n"
         << "2 - Круг\n"
         << "3 - Квадрат\n"
         << "4 - Треугольник\n"
         << "0 - Выход\n";
    int choice;
    (cin >> choice).ignore();
    switch (choice)
    {
    case 1: // Прямоугольник
    {
      Rect A;
      A.Input();
      A.GetSquare();
      A.Print();
      break;
    } // A.~Rect()
    case 2: // Круг
    {
      Circle A;
      A.Input();
      A.GetSquare();
      A.Print();
      break;
    } // A.~Circle()
    case 3: // Квадрат
    {
      //Square A;
      //A.Input();
      //A.GetSquare();
      //A.Print();
      break;
    }
    case 4: // Треугольник
    {
      //Triangle A;
      //A.Input();
      //A.GetSquare();
      //A.Print();
      break;
    }
    case 0: // Выход
      //exit(0); - выход из программы
      //return 0; - выход из main
      //abort(); - аварийное завершение программы
      isExit = true; // сигнал о выходе из цикла
      break;
    default:
      // Error
      break;
    } // switch(choice);
  } // while(true)
  cout << "Good bye...\n";
}
