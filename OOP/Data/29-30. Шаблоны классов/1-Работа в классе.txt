#include <iostream>
#include <iomanip>
#include <string>
#include <time.h>
#include <fstream>
using namespace std;
#define RAND(Min,Max)  (rand()%((Max)-(Min)+1)+(Min))
struct LC { LC() { system("chcp 1251 > nul"); srand(time(0)); }~LC() { cin.get(); cin.get(); } } _;

/*
  Шаблоны классов
*/
//template <typename Type>
template <class Type = int>
class TSample
{
private:
  Type data;
  //string Name;
public:
  TSample() : data() { /* data = 0; ??? */ }
  TSample(const Type& val) : data(val)
  {
    data = val; // OK
    //val = data; // ERROR
  }
  Type GetData() const { return data; }
  void SetData(const Type& val) { data = val; }

  // операторы ввода-вывода
  friend ostream& operator << (ostream& os,
                    const TSample<Type> & obj)
  {
    // вывод информации о типе из Type
    os << "(Type = " << typeid(Type).name() << ")";
    os << obj.GetData(); // === os << obj.data;
    return os;
  }

  friend istream& operator >> (istream& is,
                            TSample<Type> & obj)
  {
    // typeid( argument ) - оператор для 
    //                 определения типа argument
    cout << "Type = " <<
      typeid(obj.data).name() << endl;
    cout << "Enter data: ";
    is >> obj.data;
    //is.ignore();
    //getline(is, obj.Name); // OK Name - string
    return is;
  }

  // TSample< float > a;
  // TSample< float > b;
  // a + b
  TSample<Type> operator + (
           const TSample<Type> & right) const
  {
    TSample<Type> result; // для хранения результата
    result.data = this->data + right.data;
    return result; // возвращ. результат
  }

}; // TSample<>



// Класс TSample для примера шаблона класса
int main()
{
  TSample< int > A;    // Type = int ==> int data;
  TSample< double > B; // Type = double ==> double data;
  TSample<> C;         // по умолчанию Type = int
  TSample< string > D; // Type = std::string
  //cout << "Eneter int: ";
  cin >> A;
  cout << "A = " << A << endl;

  cin >> B;
  cout << "B = " << B << endl;

  cin >> C;
  cout << "C = " << C << endl;

  cin >> D;
  cout << "D = " << D << endl;

} // int main()


/*
template<class T1, class T2, class T3 = float>
class Test
{
  T1 a;
  T2 b;
  T3 c;
public:
  Test() {}
};

int main()
{
  Test<int, string> A;
  Test<Cat, Dog> B;
  // T1 = string, T2 = char, T3 = double
  Test<string, char, double> C;
}
*/

/*
template <class T, int _Size>
class Array
{
private:
  T* Mas;
  int Size;
public:
  Array() {
    Mas = new T[_Size];
    Size = _Size;
  }
};

int main()
{
  Array<int, 10>  arr1;
}
*/
