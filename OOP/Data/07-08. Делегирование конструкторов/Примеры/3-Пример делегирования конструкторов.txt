#include <iostream>
#include <time.h>
using namespace std;

#define RAND(Min,Max) (rand()%((Max)-(Min)+1) + (Min))

/*
  Конструкторы, деструкторы
  Делегироваие конструкторов
*/

class Test
{
private:
  int   size;
  int * mas;
public:
  // делегирование к конструкторам переменных класса
  Test() : size(), mas() {}
  /* расшифровка
  Test() {
    size = 0;
    mas = nullptr;
  }
  */

  //Test() : size(10), mas(new int[10]) {}
  /* расшифровка
  Test()
  {
    size = 10;
    mas = new int[10];
  }
  */

  // конструктор с одним параметром
  Test(int len) : size(len), mas(new int[len]) // делегирование к конструкторам переменных класса
  {
    for (int i = 0; i < size; i++)
    {
      mas[i] = RAND(1, 10);
    }
  }
  /*
  Test(int len)
  {
    size = len;
    mas  = new int[len];
    for (int i = 0; i < size; i++)
    {
      mas[i] = RAND(1, 10);
    }
  }
  */

  // конструктор с двумя параметрами
  Test(int* arr, int len) : Test(len) // делегирование к конструктору класса с одним параметром
  {
    for (int i = 0; i < size; i++)
    {
      mas[i] = arr[i]; // копирование
    }
  }

  // Деструктор - специальный автоматический метод
  //   всегда один, не перегружается
  //   Служит для освобождения занятых классом ресурсов
  ~Test() {
    cout << "Сработал деструктор" << endl;
    delete[] mas;
  }

  int  GetSize() { return size; }  // getter
  void SetSize(int newSize) // setter
  {
    size = newSize;
    delete[] mas; // удаляем старые данные
    mas = new int[size]; // создаем новый массив с новым размером
  }

  void Print() {
    cout << "size = " << size << endl;
    for (int i = 0; i < size; i++) {
      cout << mas[i] << " ";
    }
    cout << endl;
  }
}; // class Test;


int main()
{
  system("chcp 1251 > nul");
  srand(time(nullptr));

  Test t1;
  t1.Print();

  {
    Test t1(20);
    t1.Print();
  }

  cin.get(); cin.get();
}
