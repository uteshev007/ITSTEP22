# include <iostream>
using namespace std;

class prim {

	int numb;
	// статическое поле
	static int stat_;

public:
	prim(int i) {
		numb = i;
	}

	/*
	Статическая функция. Указатель this не определен,
	поэтому выбор объекта осуществляется по явно
	переданному указателю. Поле stat_ не требует
	указателя на объект,т.к. оно общий для всех объектов класса prim.
	*/
	static void func(int i, prim *p = 0) {
		// если хотя бы один объект есть 
		if (p)
			p->numb = i;
		// если объектов класса нет
		else
			stat_ = i;
	}

	/*
	Статическая функция обращается только к
	статическому члену класса, никаких указателей не требуется.
	*/
	static void show() {
		cout << "stat_=" << stat_ << "\n\n";
	}

	//показ нестатического члена
	void show2() {
		cout << "numb=" << numb << "\n\n";
	}
};

// Инициализация статического члена класса. 
int prim::stat_ = 8;

void main() {

	/*
	До создания объектов типа prim возможен
	единственный способ обращения к статической
	функции-члену.
	*/
	prim::show();

	// Можно изменить значение статического члена класса. 
	prim::func(10);

	/*
	После создания объекта типа prim можно обратиться
	к статической функции обычным для абстрактных типов способом.
	*/

	// Создается объект obj и его поле numb 
	// становится равным 23.  
	prim obj(23);
	obj.show2();

	// Можно изменить значение созданного объекта. 
	prim::func(20, &obj); // obj.numb 20. 
	obj.show2();

	obj.func(27, &obj); // obj.numb 27. 
	obj.show2();

	cin.get();
}
